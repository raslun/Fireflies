// Define pins
int outLED = 13;
int outLDR = 12;
int readLDR = A5;

boolean listening = true;

// Define fundamental values
int lightThresh = 7;
int basePhase = 500;
int deafPeriod = 10;
double freqSpread = 0.2;

// Set initial values
int blinkThresh = basePhase;
int phase;

// Define curve response values
double beta = 0.5;
// Phase
double thau = 0;
double alpha = 0.5;
// Frequency

void setup() {
  Serial.begin(9600);
  // Set I/O
  pinMode(outLED, OUTPUT);
  pinMode(outLDR, OUTPUT);
  pinMode(readLDR, INPUT);
  randomSeed(analogRead(0));
  phase = random(0,blinkThresh);
  int r = random(0,blinkThresh);
  blinkThresh = blinkThresh + 2*r*freqSpread - blinkThresh*freqSpread/2;
}

void loop() {
  // Define local variables
  double p;
  double f;
  double silent = 0;
  
  // Calculate next phase
  phase = phase+1;
  double blinkFreshShadow = double(blinkThresh);
  double refPhase = double(phase)/blinkFreshShadow; // Phase described as 0 to 1 in double instead of 0 
to blinkThresh in int
  if(refPhase >= 1){
    digitalWrite(outLED, HIGH);
    phase = 0;
    silent = 0;
  } else if(phase > deafPeriod){
    digitalWrite(outLED, LOW);
  }
  // Get the input data and adjust phase and frequency
  int input = analogRead(readLDR);
  if(input < lightThresh && silent <= refPhase && phase > deafPeriod){
    listening = true;
  }
  if(input > lightThresh && refPhase > thau && listening){
    listening = false;
    // Phase
    if (refPhase <= beta){
      p = refPhase*alpha;
    }
    else{ //phase > beta
      p = 1;
    }
    
    // Frequency
    if (refPhase <= thau){
         f = 1;
    }
    else if (refPhase <= (3*beta/4)){
       f = 1+alpha*thau-alpha*refPhase;
    }
    else if (refPhase <= beta){
       f = 1;
    }
    else{ //refPhase > beta
       f = double(1.25+0.5*(beta-refPhase));
    }
    double adjust = 1/f;
    blinkThresh = blinkThresh*adjust;    /// blinkthresh / f ? 
    phase = p*blinkThresh;
    silent = refPhase + thau;
    if(silent > 1){
      silent = 1;
    }
  }
  Serial.print(input);
  Serial.print('\n');
  delay(1); // To not cause an overflow in phase counter
}
